<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Git on Greg Beifuss</title>
        <link>https://gbeifuss.github.io/tags/git/</link>
        <description>Recent content in Git on Greg Beifuss</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <lastBuildDate>Tue, 02 Nov 2021 20:16:01 -0400</lastBuildDate><atom:link href="https://gbeifuss.github.io/tags/git/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>Removing GIT History</title>
        <link>https://gbeifuss.github.io/p/removing-git-history/</link>
        <pubDate>Tue, 02 Nov 2021 20:16:01 -0400</pubDate>
        
        <guid>https://gbeifuss.github.io/p/removing-git-history/</guid>
        <description>&lt;p&gt;I was training a colleague on using git last week with my Powershell script repository. When I reviewed the git history, I realized that there were lots of entries that were no longer necessary: primarily scripts that I deleted because they were obsolete, or never moved past development. I wanted to find a way to purge all entries related to these files from the git repository.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git filter-branch --index-filter &amp;quot;git rm -rf --cached --ignore-unmatch FILEPATH&amp;quot; HEAD&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;This took about a dozen minutes to walk through my approx. 400 commits. Each commit has to be checked, and then removed if it referenced the file.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Amending a Git Commit Statement</title>
        <link>https://gbeifuss.github.io/p/amending-a-git-commit-statement/</link>
        <pubDate>Thu, 02 Sep 2021 07:37:36 -0400</pubDate>
        
        <guid>https://gbeifuss.github.io/p/amending-a-git-commit-statement/</guid>
        <description>&lt;p&gt;Sometimes I make a hideous typo in my &lt;code&gt;git commit -m &amp;quot;description here&amp;quot;&lt;/code&gt; message, or decide that I need to make a clearer commit message, before I&amp;rsquo;ve done a push.&lt;/p&gt;
&lt;p&gt;It looks something like this when I&amp;rsquo;m working with hugo:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;git add .
git commit -m &amp;#34;Website update 2021-090-2&amp;#34;
PANIC SETS IN
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Fortunately, it&amp;rsquo;s relatively simple to change the commit message &lt;em&gt;before&lt;/em&gt; the push has happened:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;git commit --amend -m &amp;#34;Website update 2021-09-02&amp;#34;
git push origin main
&lt;/code&gt;&lt;/pre&gt;</description>
        </item>
        <item>
        <title>Pushing to GitHub via. Git</title>
        <link>https://gbeifuss.github.io/p/pushing-to-github-via.-git/</link>
        <pubDate>Mon, 09 Aug 2021 14:00:25 -0400</pubDate>
        
        <guid>https://gbeifuss.github.io/p/pushing-to-github-via.-git/</guid>
        <description>&lt;p&gt;When I first committed to actually publishing a blog and settled on using Hugo and Github, I ran into a problem when trying to actually synchronize my local repository with Github: I kept getting a &amp;lsquo;Permission Denied (publickey)&amp;rsquo; error when I pushed the content up to Github. After some Google-fu, I found that the error was because I didn&amp;rsquo;t have any SSH keys setup on my Windows 10 system and it couldn&amp;rsquo;t communicate securely with GitHub.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s how I fixed that:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Open &lt;code&gt;git bash&lt;/code&gt;. I could have done this in Windows Terminal (by creating a new profile linked to git bash), but since this is a one-time task, I didn&amp;rsquo;t bother.&lt;/li&gt;
&lt;li&gt;Type &lt;code&gt;cd ~/.ssh&lt;/code&gt;. This will take you to the root directory for Git (likely C:\Users\username\.ssh\)&lt;/li&gt;
&lt;li&gt;Within the &lt;code&gt;.ssh&lt;/code&gt; folder, there should be two files: &lt;code&gt;id_rsa&lt;/code&gt; and &lt;code&gt;id_rsa.pub&lt;/code&gt;. Type &lt;code&gt;ls&lt;/code&gt; to see a directory listing. These are the files that tell your computer how to communicate with GitHub. If those two files don&amp;rsquo;t show up, continue to #4.&lt;br&gt;
NOTE: Your SSH keys must be named id_rsa and id_rsa.pub in order for Git and GitHub to recognize them by default.&lt;/li&gt;
&lt;li&gt;Since the SSH keys don&amp;rsquo;t exist yet, create thethem: type &lt;code&gt;ssh-keygen -t rsa -C &amp;quot;you@email.com&amp;quot;&lt;/code&gt;. This will create both the &lt;code&gt;id_rsa&lt;/code&gt; and &lt;code&gt;id_rsa.pub&lt;/code&gt; files.&lt;/li&gt;
&lt;li&gt;Open &lt;code&gt;id_rsa.pub&lt;/code&gt; in &lt;del&gt;your favorite text editor&lt;/del&gt; Notepad.&lt;/li&gt;
&lt;li&gt;Copy the contents (exactly as it appears, with no extra spaces or lines) of &lt;code&gt;id_rsa.pub&lt;/code&gt; and paste it into GitHub under the Account Settings &amp;gt; SSH Keys page.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Now that you&amp;rsquo;ve added your public key to Github, try to &lt;code&gt;git push&lt;/code&gt; again and see if it works. It should!&lt;/p&gt;
&lt;p&gt;A step-by-step rundown of this process (and more!) is also on the GitHub site: &lt;a class=&#34;link&#34; href=&#34;https://docs.github.com/en/github/authenticating-to-github/connecting-to-github-with-ssh&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Connecting to GitHub with SSH&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Pushing Hugo Content to GitHub</title>
        <link>https://gbeifuss.github.io/p/pushing-hugo-content-to-github/</link>
        <pubDate>Wed, 04 Aug 2021 07:49:02 -0400</pubDate>
        
        <guid>https://gbeifuss.github.io/p/pushing-hugo-content-to-github/</guid>
        <description>&lt;p&gt;This blog content is generated by the &lt;a class=&#34;link&#34; href=&#34;https://gohugo.io/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Hugo&lt;/a&gt; static site generator and integrated with GitHub (which you can clearly tell by the URL), but I&amp;rsquo;m always struggling to remember the steps in pushing the newest content publicly.&lt;/p&gt;
&lt;p&gt;But I&amp;rsquo;m getting ahead of myself. Before I get there, hugo and github need to be integrated. I&amp;rsquo;m using Windows 10, so I needed to start by installing git locally.
Once that was complete, I had the &lt;em&gt;git bash shell&lt;/em&gt; that I could use to generate the SSH keys that my computer will use to connect with my github account. On Windows 10, the .ssh directory is located at C:\Users\Administrator.ssh&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Start by generating a new SSH key to use for this connection. I used the ed25519 algorithm, which is faster and more &amp;lsquo;secure&amp;rsquo; than the RSA-2048 key that&amp;rsquo;s commonly used today:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Administrator@AC08871 MINGW64 ~/.ssh
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ ssh-keygen -t ed25519 -C &lt;span class=&#34;s2&#34;&gt;&amp;#34;email@email.com&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Then, copy the newly generated public key to the clipboard, because we&amp;rsquo;re going to paste it to github:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Administrator@AC08871 MINGW64 ~/.ssh
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ clip &amp;lt; id_ed25519.pub
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Log into github &amp;gt; Settings &amp;gt; SSH &amp;amp; GPG Keys. Create a new SSH key, and paste in the contents of the clipboard (which is the public key I just created)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Test the connection via. &lt;em&gt;git bash shell&lt;/em&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Administrator@AC08871 MINGW64 ~/.ssh
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ ssh -T git@github.com
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Hi gbeifuss! You&lt;span class=&#34;err&#34;&gt;&amp;#39;&lt;/span&gt;ve successfully authenticated, but GitHub does not provide shell access.
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Now that the connection between my computer and github is established, let&amp;rsquo;s configure github as a remote repository:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;C:\Users\Greg\OneDrive\myblog.dev.repo\public&amp;gt; git remote add origin https://github.com/gbeifuss/gbeifuss.github.io.git

C:\Users\Greg\OneDrive\myblog.dev.repo\public&amp;gt;git remote -v
origin  https://github.com/gbeifuss/gbeifuss.github.io.git (fetch)
origin  https://github.com/gbeifuss/gbeifuss.github.io.git (push)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Finally, I&amp;rsquo;m ready to push my content up:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Change to your site&amp;rsquo;s local directory, then tell Hugo to build the content:&lt;br&gt;
&lt;code&gt;cd myblog.dev.repo&lt;/code&gt;&lt;br&gt;
&lt;code&gt;hugo&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Change to your site&amp;rsquo;s public directory (where the new content was just generated):&lt;br&gt;
&lt;code&gt;cd public&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Add all of the new files to git. This command analyzes the repository files, adding all modified and/or untracked files in the current directory and subdirectories to staged status. This prepares them for inclusion in the next &lt;code&gt;git commit&lt;/code&gt;. The &lt;code&gt;.gitignore&lt;/code&gt; file can be used to define any files/patterns that should be skipped:&lt;br&gt;
&lt;code&gt;git add .&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Commit the locally staged files with a comment. This command will add &lt;em&gt;all&lt;/em&gt; the changed files, so be aware of that if you&amp;rsquo;re only intending to commit/push select files!:&lt;br&gt;
&lt;code&gt;git commit -m &amp;quot;Website update 2021-08-03&amp;quot;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Push the local content up to GitHub. &lt;em&gt;origin&lt;/em&gt; is the remote repository name (alias) and &lt;em&gt;main&lt;/em&gt; is the branch name. (Since October 2020, main is the default branch that must exist on any repository):&lt;br&gt;
&lt;code&gt;git push origin main&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;And here it all is in a glorious code block, so that in the future, I can just copy and paste!&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;cd myblog.dev.repo
hugo
cd public
git add .
git commit -m &amp;#34;Website update 2021-08-03&amp;#34;
git push origin main
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;I&amp;rsquo;ve also been trying to sort out how to update the theme I use (Stack), which is periodically updated. Right now my process is to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;log into github and pull the latest release into my fork&lt;/li&gt;
&lt;li&gt;delete the contents of &lt;code&gt;\themes\hugo-stack-theme&lt;/code&gt; on my computer&lt;/li&gt;
&lt;li&gt;tell git to repopulate the directory:
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-git&#34; data-lang=&#34;git&#34;&gt;\myblog.dev.repo\themes&amp;gt; git clone git@github.com:gbeifuss/hugo-theme-stack hugo-theme-stack

Cloning into &amp;#39;hugo-theme-stack&amp;#39;...
remote: Enumerating objects: 3111, done.
remote: Counting objects: 100% (1026/1026), done.
remote: Compressing objects: 100% (416/416), done.
remote: Total 3111 (delta 796), reused 695 (delta 601), pack-reused 2085
Receiving objects: 100% (3111/3111), 841.36 KiB | 2.85 MiB/s, done.
Resolving deltas: 100% (1958/1958), done.

\myblog.dev.repo\themes&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;recopy my avatar image to &lt;code&gt;\themes\hugo-stack-theme\assets\img\&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        
    </channel>
</rss>
